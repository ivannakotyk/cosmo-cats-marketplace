/*
 * Cosmo Cats Intergalactic Marketplace API
 * REST API for managing intergalactic products in the **Cosmo Cats Marketplace**.   Includes CRUD operations, validation rules, and standardized error responses (RFC 9457). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProblemDetails;
import org.openapitools.client.model.ProductCreateDTO;
import org.openapitools.client.model.ProductDTO;
import org.openapitools.client.model.ProductUpdateDTO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProduct
     * @param productCreateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — a product with the same name already exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(ProductCreateDTO productCreateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(ProductCreateDTO productCreateDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productCreateDTO' is set
        if (productCreateDTO == null) {
            throw new ApiException("Missing the required parameter 'productCreateDTO' when calling createProduct(Async)");
        }
        

        okhttp3.Call localVarCall = createProductCall(productCreateDTO, _callback);
        return localVarCall;

    }

    /**
     * Create a new product
     * 
     * @param productCreateDTO  (required)
     * @return ProductDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — a product with the same name already exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ProductDTO createProduct(ProductCreateDTO productCreateDTO) throws ApiException {
        ApiResponse<ProductDTO> localVarResp = createProductWithHttpInfo(productCreateDTO);
        return localVarResp.getData();
    }

    /**
     * Create a new product
     * 
     * @param productCreateDTO  (required)
     * @return ApiResponse&lt;ProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — a product with the same name already exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDTO> createProductWithHttpInfo(ProductCreateDTO productCreateDTO) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(productCreateDTO, null);
        Type localVarReturnType = new TypeToken<ProductDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new product (asynchronously)
     * 
     * @param productCreateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — a product with the same name already exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(ProductCreateDTO productCreateDTO, final ApiCallback<ProductDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(productCreateDTO, _callback);
        Type localVarReturnType = new TypeToken<ProductDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     * @param id Unique product identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product successfully deleted — no content is returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProduct(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a product by ID
     * 
     * @param id Unique product identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product successfully deleted — no content is returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProduct(UUID id) throws ApiException {
        deleteProductWithHttpInfo(id);
    }

    /**
     * Delete a product by ID
     * 
     * @param id Unique product identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product successfully deleted — no content is returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a product by ID (asynchronously)
     * 
     * @param id Unique product identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product successfully deleted — no content is returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProduct
     * @param id Unique product identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product found and returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProduct(Async)");
        }
        

        okhttp3.Call localVarCall = getProductCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a product by its ID
     * 
     * @param id Unique product identifier (required)
     * @return ProductDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product found and returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ProductDTO getProduct(UUID id) throws ApiException {
        ApiResponse<ProductDTO> localVarResp = getProductWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a product by its ID
     * 
     * @param id Unique product identifier (required)
     * @return ApiResponse&lt;ProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product found and returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDTO> getProductWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getProductValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProductDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a product by its ID (asynchronously)
     * 
     * @param id Unique product identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product found and returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductAsync(UUID id, final ApiCallback<ProductDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProductDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProducts
     * @param categoryId Filter products by category ID (optional)
     * @param minPrice Minimum price for filtering (optional)
     * @param maxPrice Maximum price for filtering (optional)
     * @param name Filter products by partial name match (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with all available products </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductsCall(UUID categoryId, Double minPrice, Double maxPrice, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPrice", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPrice", maxPrice));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProductsValidateBeforeCall(UUID categoryId, Double minPrice, Double maxPrice, String name, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listProductsCall(categoryId, minPrice, maxPrice, name, _callback);
        return localVarCall;

    }

    /**
     * Get a list of all products
     * 
     * @param categoryId Filter products by category ID (optional)
     * @param minPrice Minimum price for filtering (optional)
     * @param maxPrice Maximum price for filtering (optional)
     * @param name Filter products by partial name match (optional)
     * @return List&lt;ProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with all available products </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductDTO> listProducts(UUID categoryId, Double minPrice, Double maxPrice, String name) throws ApiException {
        ApiResponse<List<ProductDTO>> localVarResp = listProductsWithHttpInfo(categoryId, minPrice, maxPrice, name);
        return localVarResp.getData();
    }

    /**
     * Get a list of all products
     * 
     * @param categoryId Filter products by category ID (optional)
     * @param minPrice Minimum price for filtering (optional)
     * @param maxPrice Maximum price for filtering (optional)
     * @param name Filter products by partial name match (optional)
     * @return ApiResponse&lt;List&lt;ProductDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with all available products </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductDTO>> listProductsWithHttpInfo(UUID categoryId, Double minPrice, Double maxPrice, String name) throws ApiException {
        okhttp3.Call localVarCall = listProductsValidateBeforeCall(categoryId, minPrice, maxPrice, name, null);
        Type localVarReturnType = new TypeToken<List<ProductDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of all products (asynchronously)
     * 
     * @param categoryId Filter products by category ID (optional)
     * @param minPrice Minimum price for filtering (optional)
     * @param maxPrice Maximum price for filtering (optional)
     * @param name Filter products by partial name match (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with all available products </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProductsAsync(UUID categoryId, Double minPrice, Double maxPrice, String name, final ApiCallback<List<ProductDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProductsValidateBeforeCall(categoryId, minPrice, maxPrice, name, _callback);
        Type localVarReturnType = new TypeToken<List<ProductDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param id Unique product identifier (required)
     * @param productUpdateDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — cannot update product due to duplicate or invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(UUID id, ProductUpdateDTO productUpdateDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdateDTO;

        // create path and map variables
        String localVarPath = "/api/v1/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(UUID id, ProductUpdateDTO productUpdateDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'productUpdateDTO' is set
        if (productUpdateDTO == null) {
            throw new ApiException("Missing the required parameter 'productUpdateDTO' when calling updateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductCall(id, productUpdateDTO, _callback);
        return localVarCall;

    }

    /**
     * Update an existing product by ID
     * 
     * @param id Unique product identifier (required)
     * @param productUpdateDTO  (required)
     * @return ProductDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — cannot update product due to duplicate or invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ProductDTO updateProduct(UUID id, ProductUpdateDTO productUpdateDTO) throws ApiException {
        ApiResponse<ProductDTO> localVarResp = updateProductWithHttpInfo(id, productUpdateDTO);
        return localVarResp.getData();
    }

    /**
     * Update an existing product by ID
     * 
     * @param id Unique product identifier (required)
     * @param productUpdateDTO  (required)
     * @return ApiResponse&lt;ProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — cannot update product due to duplicate or invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDTO> updateProductWithHttpInfo(UUID id, ProductUpdateDTO productUpdateDTO) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(id, productUpdateDTO, null);
        Type localVarReturnType = new TypeToken<ProductDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing product by ID (asynchronously)
     * 
     * @param id Unique product identifier (required)
     * @param productUpdateDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found (RFC9457) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict — cannot update product due to duplicate or invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(UUID id, ProductUpdateDTO productUpdateDTO, final ApiCallback<ProductDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(id, productUpdateDTO, _callback);
        Type localVarReturnType = new TypeToken<ProductDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
